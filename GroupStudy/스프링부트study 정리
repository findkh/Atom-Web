# 2022-05-16 ~ 2022-05-20 주간 Study 정리
## 1. Framework를 사용하는 이유
- 프레임워크는 프로그램의 실행 흐름을 미리 만들어 놓은 것으로 체계적으로 코드관리를 하므로 유지보수가 용이하고, 기본 설계 및 기능 라이브러리를 제공하기 때문에 생산성이 높습니다.
또한 코드에 대한 재사용성이 높고 추상화된 코드 제공을 통해 오버라이딩하면 되기 때문에 확장성이 좋아 Framwork를 사용합니다.  

## 1-1 Framework와 라이브러리의 차이
- 프레임워크는 뼈대나 기반 구조를 뜻하고 IoC개념이 적용된 기술입니다. 그래서 완성된 애플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야 합니다. 
라이브러리는 단순 활용 가능한 도구들의 집합입니다.  
이 둘의 차이는 애플리케이션의 흐름을 누가 쥐고 있느냐입니다. 프레임워크는 전체적인 흐름을 스스로 쥐고 있으며 사용자는 그 안에서 필요한 코드를 넣지만 라이브러리는 사용자가 전체적인 흐름을 만들며 라이브러리를 가져다 쓰는 것입니다.
<img src="https://user-images.githubusercontent.com/89373222/169299932-33aeb194-3393-472d-83fc-eb23bcdea0ab.png">

## 2. Spring Framework를 특징
- 경량 컨테이너로서 자바 객체를 직접관리합니다.
- 제어역행(IoC: Inversion of Control) : 애플리케이션의 느슨한 결합을 도모합니다. 즉 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출합니다.
- 의존성 주입(DI) : 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임 워크가 서로 연결해줍니다.
- 관점 지향 프로그래밍(AOP) : 트랜잭션이나 로깅, 보안과 같은 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있습니다.
- 트랜잭션 관리 프레임 워크 : 추상화된 트랜잭션 관리를 지원하며 설정파일을 이용한 선언적인 방식과 프로그래밍을 통한 방식 모두를 지원합니다.
- MVC 패턴 : DispatcherServlet이 Controller 역할을 담당하여 요청을 분산시켜주며 이를 각 서비스들이 처리하여 결과를 생성하고 그 결과는 다양한 형식의 view 서비스들로 화면에 표시될 수 있습니다.
- 배치 프레임워크 : 특정 시간대에 실행하거나 대용량의 자료를 처리하는데 쓰이는 일괄처리(Batch Processing)을 지원하는 배치 프레임워크를 지원합니다. 스프링 배치는 Quarts 기반으로 동작합니다.

## 2-1. Spring Framework를 사용하는 이유
-
- POJO 기반의 구성(Plain Old Java Object) : 스프링 프레임워크는 가벼운 프레임워크지만 내부에는 객체 간의 관계를 구성할 수 있는 특징이 있습니다. 스프링은 다른 프레임워크들과 달리 이 관계를 구성할 때 별도의 API 를 사용하지 않는 POJO의 구성만으로 구성이 가능하도록 제작되어 있습니다. 이 특징 때문에 개발자가 라이브러리나 컨테이너의 기술에 종속적이지 않고 일반적인 형태로 코드를 작성하고 실행할 수 있기 때문에 생성성에 유리하고, 코드 테스트에도 유연할 수 있습니다.
- 우리나라 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자정부 표준프레임워크의 기반 기술로 쓰이고 있습니다.
https://joychae.tistory.com/27

## 3. CI(Continuous Integration)
- 애자일방법론 중에서 XP(eXtrem Programming) 기본 원리 중 하나로 매일 여러 번씩 소프트웨어를 통합하고 빌드해야 한다는 원리입니다.

## 4. DI(Dependency Injection) = 의존성 주입
- 의존성 주입은 필요한 객체를 직접 생성하는 것이 아닌 외부로부터 필요한 객체를 받아서 사용합니다. 이를 통해 객체간의 결합도를 줄이고 코드의 재활용성을 높여줍니다.

## 5. AOP(Aspect Oriented Programing) = 관점 지향 프로그래밍
- 어떤 로직을 바탕으로 핵심적인 관점과 부가적인 관점으로 나누어서 바로보고 그 관점을 기준으로 각각 모듈화하여 프로그래밍하는 기법입니다.
AOP는 문제 해결하기 위한 핵심 관심 사항과 전체에 적용되는 공통 관심 사항을 기준으로 프로그래밍함으로써 공통 모듈을 여러 코드에 쉽게 적용할 수 있도록 도와줍니다.
AOP를 구현하는 다양한 방법이 있지만 기본적인 개념은 공통 관심 사항을 구현한 코드를 핵심 로직 구현 코드 안에 삽입하는 것입니다.
( 공통적인 부분을 분리해내고 필요할 때만 갖다쓸 수 있게 해주는 기능이다. )


## 6. Maven
- Maven은 빌드 도구로서 프로젝트의 소스를 컴파일하고 테스트, 문서 생성, 배포 파일 생성 들의 역할을 합니다. Maven이란 빌드 도구를 사용하여 프로젝트를 생성하면 특정 IDE에 종속되지 않는 프로젝트 폴더 구조를 만들 수 있습니다.

## 7. SVN(Subversion)
- CVS는 파일 단위로 주고 받는데, SVN은 변경 내용을 순서에 따라 기록 관리하며 파일을 통째로 주고 받는 대신에 변경된 내용만 주고 받기 때문에 CVS 방식에 비해 전송 Data 양이 적습니다.
CVS SVN 방식은 서버가 다운되거나 서버가 소실되면 모든 변경 내역이 서버에만 존재하기 때문에 모든 자료가 사라집니다. 그래서 나온 형상관리시스템이 git입니다. git은 서버에 프로젝트를 두고 변경 내용을 기록한 파일을 둡니다. 클라이언트는 이를 복제하여 사용하기 때문에 클라이언트 쪽에도 변경 내역이 존재하여 서버나 클라이언트 중 하나에 문제가 생겨도 손상 없이 사용할 수 있습니다.

## 8. Hibernate
- 자바 언어를 위한 ORM 프레임워크로 JPA의 구현체입니다. JPA 인터페이스를 구현하며 내부적으로 JDBC API를 사용합니다.
JPA는 관계형 데이터베이스와 객체의 패러다임 불일치 문제를 해결할 수 있다는 점과 영속성 컨텍스트를 제공하는 것이 특징입니다.

## 9. O/R mapping(Object Relational Model)
- 객체와 관계형 데이터베이스의 데이터를 자동으로 연결해주는 프레임워크입니다.
객체지향 프로그래밍은 클래스를 사용하고, 관계형 DB는 테이블을 사용하기 때문에 객체 모델과 관계형 모델간의 불일치가 존재합니다. ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결해줍니다.

## 10. IBATIS
- iBATIS는 SQL에 기반을 둔 데이터베이스와 자바, 닷넷(.NET), 루비(Ruby) 등을 연결해주는 역할을 하는 프레임워크입니다.  
 이러한 연결은 프로그램의 소스코드에서 SQL 문장을 분리하여 별도의 XML 파일로 저장하고 이 둘을 서로 연결해주는 방식으로 작동합니다.

## 11. REST(Representational State Transfer)
- 웹과 같은 분산 하이퍼미디어 환경에서 자원의 존재/상태 정보를 표준화된 HTTP 메서드로 주고 받는 웹 아키택처입니다.


## 12. ibatis와 mybatis ORM 프레임워크에서 하나 이상의 레코드를 검색해서 컬렉션 리스트로 반환하는 쿼리문 실행 메소드

## 13. ibatis의 inset() 메소드와 Mybatis insert() 메소드의 차이

## 14. ibatis의 inset() 메소드를 사용하면 반환값이 Object형이므로 저장 성공과 실패를 if문으로 판별하기가 어렵다. 그러면 iBatis에서 레코드를 저장해서 반환값을 쿼리문으로 실행된 레코드의 개수로 반환해서 if문으로 분기하려면 어떻게 해야 하나?

## 15. MyBatis를 이용할 때 쿼리의 종류에는 어떤 것이 있는지 말해보시오
- if, choose, when, otherwise